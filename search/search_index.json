{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Welcome to the zr documentation site The zr package provides a simple and hot reloadable zerolog configuration. What is zr ? zr is a library for configuring easyly a zerolog logger with backends for hot reloading. Project is under development zr is actually under active development. Contributions are welcome.","title":"Overview"},{"location":"#overview","text":"Welcome to the zr documentation site The zr package provides a simple and hot reloadable zerolog configuration.","title":"Overview"},{"location":"#what-is-zr","text":"zr is a library for configuring easyly a zerolog logger with backends for hot reloading. Project is under development zr is actually under active development. Contributions are welcome.","title":"What is zr ?"},{"location":"getting_start/","text":"Getting Started Installation go get -u github.com/azrod/zr Basic usage 1 2 3 4 5 6 7 8 9 10 11 12 13 package main import ( \"github.com/azrod/zr\" \"github.com/rs/zerolog/log\" ) func main () { zr . Setup () log . Info (). Msg ( \"Hello world\" ) } Output { \"level\" : \"info\" , \"time\" : \"2022-06-04T14:36:24+02:00\" , \"caller\" : \"basic.go:15\" , \"message\" : \"hello world\" } Examples A lot of examples are available in the examples directory.","title":"Getting Started"},{"location":"getting_start/#getting-started","text":"","title":"Getting Started"},{"location":"getting_start/#installation","text":"go get -u github.com/azrod/zr","title":"Installation"},{"location":"getting_start/#basic-usage","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 package main import ( \"github.com/azrod/zr\" \"github.com/rs/zerolog/log\" ) func main () { zr . Setup () log . Info (). Msg ( \"Hello world\" ) } Output { \"level\" : \"info\" , \"time\" : \"2022-06-04T14:36:24+02:00\" , \"caller\" : \"basic.go:15\" , \"message\" : \"hello world\" }","title":"Basic usage"},{"location":"getting_start/#examples","text":"A lot of examples are available in the examples directory.","title":"Examples"},{"location":"backends/etcd/","text":"Backend ETCD The ETCD backend is used to store the configuration. zr read database every time (Default interval is 60 seconds) and apply the configuration. A complet example is available in the examples/etcd . Basic usage 1 2 3 4 5 6 7 8 zr . Setup ( zr . WithCustomHotReload ( hr . WithBackendETCD ( backend . ConfigBackendETCD { Endpoints : [] string { \"http://localhost:2379\" }, Path : \"/zr/basic/config\" , }), ), ) Options for the backend backend . ConfigBackendETCD { Endpoints : [] string { \"http://localhost:2379\" }, Path : \"/zr/basic/config\" , DialTimeout : time . Second * 5 , TLS : tlsConfig , }","title":"ETCD"},{"location":"backends/etcd/#backend-etcd","text":"The ETCD backend is used to store the configuration. zr read database every time (Default interval is 60 seconds) and apply the configuration. A complet example is available in the examples/etcd .","title":"Backend ETCD"},{"location":"backends/etcd/#basic-usage","text":"1 2 3 4 5 6 7 8 zr . Setup ( zr . WithCustomHotReload ( hr . WithBackendETCD ( backend . ConfigBackendETCD { Endpoints : [] string { \"http://localhost:2379\" }, Path : \"/zr/basic/config\" , }), ), )","title":"Basic usage"},{"location":"backends/etcd/#options-for-the-backend","text":"backend . ConfigBackendETCD { Endpoints : [] string { \"http://localhost:2379\" }, Path : \"/zr/basic/config\" , DialTimeout : time . Second * 5 , TLS : tlsConfig , }","title":"Options for the backend"},{"location":"backends/local_api/","text":"Backend Local API Local API backend is used to provide a basic HTTP API to read and write the configuration. Configuration is stored in memory and is not persisted. Local API backend is a default backend. It is used if no other backend is specified. Actually authentification and TLS are not supported. A complet example is available in the examples/local_api . 1 2 3 4 5 6 7 8 zr . Setup ( zr . WithCustomHotReload ( hr . WithBackendLocalAPI ( backend . ConfigBackendLocalAPI { Address : \"127.0.0.1\" , Port : 6583 , }), ), ) By default HTTP server is configured to listen on 127.0.0.1:8080 .","title":"Local API"},{"location":"backends/local_api/#backend-local-api","text":"Local API backend is used to provide a basic HTTP API to read and write the configuration. Configuration is stored in memory and is not persisted. Local API backend is a default backend. It is used if no other backend is specified. Actually authentification and TLS are not supported. A complet example is available in the examples/local_api . 1 2 3 4 5 6 7 8 zr . Setup ( zr . WithCustomHotReload ( hr . WithBackendLocalAPI ( backend . ConfigBackendLocalAPI { Address : \"127.0.0.1\" , Port : 6583 , }), ), ) By default HTTP server is configured to listen on 127.0.0.1:8080 .","title":"Backend Local API"},{"location":"setup/hot_reload/","text":"Hot Reload Hot reloading is a feature that allows you to change your zerolog configuration without restarting the application. Hot reload is enabled by default. By default backend local API is used. No need to configure anything. Backends Multiple backends are available : local API ETCD Disable hot reload 1 2 3 4 5 6 7 8 9 10 11 12 import ( \"github.com/azrod/zr\" hr \"github.com/azrod/zr/pkg/hotreload\" ) func main () { zr . Setup ( zr . WithCustomHotReload ( hr . WithNoHotReload (), ), )","title":"Hot Reload"},{"location":"setup/hot_reload/#hot-reload","text":"Hot reloading is a feature that allows you to change your zerolog configuration without restarting the application. Hot reload is enabled by default. By default backend local API is used. No need to configure anything.","title":"Hot Reload"},{"location":"setup/hot_reload/#backends","text":"Multiple backends are available : local API ETCD","title":"Backends"},{"location":"setup/hot_reload/#disable-hot-reload","text":"1 2 3 4 5 6 7 8 9 10 11 12 import ( \"github.com/azrod/zr\" hr \"github.com/azrod/zr/pkg/hotreload\" ) func main () { zr . Setup ( zr . WithCustomHotReload ( hr . WithNoHotReload (), ), )","title":"Disable hot reload"},{"location":"setup/log_format/","text":"Log format A log format is a string that can be used to format log messages. The default log format is json . Two formats are available : json human JSON format Output { \"level\" : \"info\" , \"time\" : \"2022-01-01T14:00:00+00:00\" , \"caller\" : \"demo.go:17\" , \"message\" : \"hello world\" } Setup 1 2 3 zr . Setup ( zr . WithCustomFormat ( \"json\" ), // (1) ) This is a default value Human format Output 2022 -01-01T14:00:00+00:00 INF demo.go:17 > hello world Setup 1 2 3 zr . Setup ( zr . WithCustomFormat ( \"human\" ), )","title":"Log Format"},{"location":"setup/log_format/#log-format","text":"A log format is a string that can be used to format log messages. The default log format is json . Two formats are available : json human","title":"Log format"},{"location":"setup/log_format/#json-format","text":"Output { \"level\" : \"info\" , \"time\" : \"2022-01-01T14:00:00+00:00\" , \"caller\" : \"demo.go:17\" , \"message\" : \"hello world\" } Setup 1 2 3 zr . Setup ( zr . WithCustomFormat ( \"json\" ), // (1) ) This is a default value","title":"JSON format"},{"location":"setup/log_format/#human-format","text":"Output 2022 -01-01T14:00:00+00:00 INF demo.go:17 > hello world Setup 1 2 3 zr . Setup ( zr . WithCustomFormat ( \"human\" ), )","title":"Human format"},{"location":"setup/log_level/","text":"Log level A log level is a string that can be used to filter log messages. The default log level is info . Log levels are defined in the zerolog package. The following levels are available : debug info warn error fatal panic 1 2 3 4 5 6 7 8 9 10 11 ( ... ) func main () { zr . Setup ( zr . WithCustomLevel ( \"debug\" ), ) log . Debug (). Msg ( \"hello world\" ) }","title":"Log Level"},{"location":"setup/log_level/#log-level","text":"A log level is a string that can be used to filter log messages. The default log level is info . Log levels are defined in the zerolog package. The following levels are available : debug info warn error fatal panic 1 2 3 4 5 6 7 8 9 10 11 ( ... ) func main () { zr . Setup ( zr . WithCustomLevel ( \"debug\" ), ) log . Debug (). Msg ( \"hello world\" ) }","title":"Log level"}]}